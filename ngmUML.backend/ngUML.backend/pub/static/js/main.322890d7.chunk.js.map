{"version":3,"sources":["reportWebVitals.ts","hooks/editorState.tsx","hooks/editorData.tsx","shell/Main/index.tsx","editor/ChangesMenu/index.tsx","shell/TopMenu/index.tsx","shell/ContextMenu/ClassMenu/Methods.tsx","shell/ContextMenu/ClassMenu/Properties.tsx","diagram/ClassNode/index.tsx","shell/ContextMenu/ClassMenu/Connection.tsx","shell/ContextMenu/ClassMenu/Connections.tsx","shell/ContextMenu/ClassMenu/Instances.tsx","shell/ContextMenu/ClassMenu/Menu.tsx","shell/ContextMenu/index.tsx","shell/NodeMenu/index.tsx","diagram/EnumNode/index.tsx","diagram/DiagramNode/index.tsx","editor/Node/index.tsx","editor/NodeGrid/index.tsx","editor/Arrow/calcArrow.tsx","editor/Arrow/index.tsx","editor/ConnectionGrid/index.tsx","shell/Canvas/index.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","EditorState","React","createContext","undefined","EditorStateProvider","children","useState","panning","setPanning","scale","setScale","focus","setFocus","Date","getTime","redraw","setRedraw","Provider","value","EditorData","EditorDataProvider","nodes","setNodes","importedNodes","setImportedNodes","layout","setLayout","forceRefresh","setForceRefresh","useRef","document","getElementById","references","setReferences","connections","setConnections","importedConnections","setImportedConnections","copyNode","node","newNode","JSON","parse","stringify","uuid","position","x","y","deleteNode","newObj","newRefs","newConnections","Object","keys","forEach","e","from","to","addNode","type","name","data","instances","moveNode","addRef","ref","importData","fetch","response","json","writeData","done","error","method","mode","body","changes","autoLayout","gNodes","map","key","gLinks","group","id","source","target","cy","cytoscape","headless","add","on","pos","$id","setTimeout","run","Main","getDifferencesMethods","importedMethods","methods","dontChange","_","differenceWith","isEqual","filter","iValue","push","indexOf","getDifferencesProperties","importedProperties","properties","console","log","getDifferencesNodes","newNodes","keyName","newMap","nodeKey","concat","getNewNodes","modifiedNodes","getModifiedNodes","getDifferencesConnections","getNewConnections","modifiedConnections","conn","label","labelFrom","labelTo","connection","getModifiedConnections","ChangesMenu","useContext","nodeChanges","useMemo","connectionChanges","dialog","setDialog","setDone","setError","style","padding","width","striped","interactive","change","index","icon","backgroundColor","length","intent","toUpperCase","substring","fill","onClick","className","confirmButtonText","cancelButtonText","isOpen","onClose","onConfirm","changesToPush","margin","textAlign","fontSize","marginRight","iconSize","TopMenu","props","writeDialog","setWriteDialog","readDialog","setReadDialog","usePortal","portalContainer","current","zIndex","height","title","Header","aria-label","HeaderName","prefix","HeaderNavigation","HeaderMenuItem","Methods","newType","setNewType","newMethod","setNewMethod","setMethods","newMethods","editMethod","field","borderTop","borderBottom","placeholder","onChange","options","splice","deleteMethod","growVertically","code","toAdd","addNewMethod","Properties","newProperty","setNewProperty","setProperties","newProperties","editProperty","deleteProperty","addNewProperty","classWrapper","fontFamily","border","borderColor","borderWidth","display","paddingTop","paddingLeft","paddingRight","paddingBottom","classProperties","flexDirection","lineHeight","ClassNode","propStyle","propClassName","Connection","connectionId","fromNode","toNode","delprompt","setDelprompt","transform","transformOrigin","Connections","setOptions","newConnection","setNewConnection","useEffect","possibleNodes","nType","labels","String","createConnection","Instances","dataPoint","Menu","drawer","setDrawer","isImported","delPrompt","setDelPrompt","alignItems","justifyContent","large","disabled","portalClassName","maxLength","loadMenu","color","ContextMenu","HeaderPanel","expanded","overflowY","NodeMenu","SideNav","isRail","isChildOfHeader","SideNavItems","SideNavMenu","renderIcon","Feather","defaultExpanded","SideNavMenuItem","EnumNode","DiagramNode","Node","nodeRef","grid","onStop","event","lastX","lastY","onStart","onDrag","onMouseEnter","onMouseOut","tabIndex","NodeGrid","gridRef","calcBox","box","canvas","top","bottom","left","right","calcAnchorPos","anchor","offset","calcArrow","fromRect","toRect","fromBox","toBox","anchorDistances","Math","max","apply","fromOrientation","toOrientation","calcAnchor","gridRect","direction","atan2","PI","calcDirection","hypot","calcLength","arrowDirection","sideLabelStyle","verticalAlign","textOverflow","whiteSpace","fontWeight","overflow","background","middleLabelStyle","labelStyle","alignContent","arrowHeadStyle","Arrow","fromRef","toRef","fromLabel","toLabel","fromArrowHead","toArrowHead","getBoundingClientRect","arrow","flip","pathD","stroke","d","ConnectionGrid","setRender","grouped","obj","sort","groupedConnections","render","visibility","ceil","viewBox","Canvas","Loading","limitToBounds","minScale","maxScale","pan","onPanning","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.322890d7.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\n\ntype IEditorState = {\n    scale: number,\n    setScale: (value: number) => void;\n    panning: boolean,\n    setPanning: (value: boolean) => void;\n    focus: string | undefined;\n    setFocus: (value: string | undefined) => void;\n    redraw: number;\n    setRedraw: (value: number) => void;\n}\n\nconst EditorState = React.createContext<\n    IEditorState | undefined\n>(undefined)\n\nexport const EditorStateProvider: React.FC = ({children}) => {\n    // State-hook that is toggles if a click should pan the\n    // surface or if we should ignore a click for panning.\n    const [panning, setPanning] = React.useState<boolean>(true)\n    const [scale, setScale] = React.useState<number>(1)\n    const [focus, setFocus] = React.useState<string>()\n    const [redraw, setRedraw] = React.useState<number>(new Date().getTime())\n\n    return (\n        <EditorState.Provider\n            value={{\n                scale,\n                setScale,\n                panning,\n                setPanning,\n                focus,\n                setFocus,\n                redraw,\n                setRedraw\n            }}\n        >\n            {children}\n        </EditorState.Provider>\n    )\n}\n\nexport default EditorState","import React from 'react'\nimport * as uuid from 'uuid'\nimport _ from 'lodash'\nimport cytoscape from 'cytoscape'\n\ninterface IProperty {\n    name: string;\n    type: string;\n    id?: number;\n}\n\ninterface IMethod {\n    name: string;\n    type: string;\n    code: string;\n    id?: number;\n}\n\ninterface INode {\n    name: string;\n    type: string;\n    position: {\n        x: number, \n        y: number\n    };\n    data: Record<\n        string,\n        string | number | IProperty[] | IMethod[]\n    >;\n    instances: any;\n    id?: number;\n}\n\ninterface IConnection {\n    name: string;\n    label?: string | React.ReactElement;\n    labelFrom?: string | React.ReactElement;\n    labelTo?: string | React.ReactElement;\n    type: string;\n    from: string;\n    to: string;\n    id?: number;\n}\n\ninterface INodes {\n    [uuid: string] : INode\n}\n\ninterface IConnections {\n    [uuid: string] : IConnection\n}\n\ninterface IEditorData {\n    nodes: INodes;\n    setNodes: (value: INodes) => void;\n    copyNode: (uuid: string) => void;\n    deleteNode: (uuid: string) => void;\n    addNode: (type: string) => void;\n    moveNode: (uuid: string, x: number, y: number) => void;\n    references: Record<string, React.RefObject<HTMLElement>>;\n    addRef: (uuid: string, ref: React.RefObject<HTMLElement>) => void;\n    connections: IConnections;\n    setConnections: (value: IConnections) => void;\n    importedNodes: INodes;\n    importedConnections: IConnections;\n    importData: () => void;\n    writeData: (data: any, done: any, error: any) => void;\n    autoLayout: () => void;\n    layout: boolean;\n    forceRefresh: number;\n}\n\nconst EditorData = React.createContext<\n    IEditorData | undefined\n>(undefined)\n\nexport const EditorDataProvider: React.FC = ({children}) => {\n    // Example object that contains nodes and their positions\n    const [\n        nodes, \n        setNodes\n    ] = React.useState<INodes>({})\n    \n    const [\n        importedNodes, \n        setImportedNodes\n    ] = React.useState<INodes>({})\n\n    const [\n        layout,\n        setLayout\n    ] = React.useState<boolean>(false)\n\n    const [\n        forceRefresh,\n        setForceRefresh\n    ] = React.useState<number>(new Date().getTime())\n\n    const moveNode = (uuid: string, x: number, y: number) => {\n        setNodes({\n            ...nodes,\n            [uuid]: {\n                ...nodes[uuid],\n                position: {\n                    x: x,\n                    y: y\n                }\n            }\n        })\n    }\n\n    const addNode = (type: string) => {\n        setNodes({\n            ...nodes,\n            [uuid.v4()]: {\n                name: 'newNode',\n                type: type,\n                position: {\n                    x: 128,\n                    y: 128\n                },\n                data: {},\n                instances: {}\n            }\n        })\n    }\n\n    const copyNode = (node: string) => {\n        // Deep Copy\n        let newNode = JSON.parse(JSON.stringify(nodes[node]))\n        \n        setNodes({\n            ...nodes,\n            [uuid.v4()]: {\n                ...newNode,\n                position: {\n                    x: newNode['position']['x'] + 32,\n                    y: newNode['position']['y'] + 32,\n                }\n            }\n        })\n    }\n\n    const deleteNode = (node: string) => {\n        let newObj = nodes\n        delete newObj[node]\n        let newRefs: any = references\n        delete newRefs[node]\n        let newConnections = connections\n        Object.keys(connections).forEach((e) => {\n            if (connections[e].from === node) {\n                delete connections[e]\n            } else if (connections[e].to === node) {\n                delete connections[e]\n            }\n        })\n        setNodes({...newObj})\n        setReferences({...newRefs})\n        setConnections({...newConnections})\n    }\n\n    const [references, setReferences] = React.useState({\n        'root': React.useRef(document.getElementById('root'))\n    })\n\n    const addRef = (\n        uuid: string, \n        ref: React.RefObject<HTMLElement>\n    ) => { \n        setReferences({\n            ...references,\n            [uuid]: ref\n        })\n    }\n\n    const [\n        connections, \n        setConnections\n    ] = React.useState<IConnections>({})\n    \n    const [\n        importedConnections, \n        setImportedConnections\n    ] = React.useState<IConnections>({})\n\n    const importData = () => {\n        // GET NODES\n        fetch('http://localhost:8000/model/data')\n            .then(response => response.json())\n            .then(data => {\n                setImportedNodes(data.nodes ?? {})\n                setNodes(\n                    JSON.parse(\n                        JSON.stringify(data.nodes)\n                    ) ?? {}\n                )\n                setImportedConnections(data.connections ?? {})\n                setConnections(\n                    JSON.parse(\n                        JSON.stringify(data.connections)\n                    ) ?? {}\n                )\n            })\n    }\n\n    const writeData = (data: any, done: any, error: any) => {\n        fetch('http://localhost:8000/model/data',\n        {\n            method: 'POST',\n            mode: 'no-cors',\n            body: JSON.stringify({\n                nodes: nodes,\n                connections: connections,\n                changes: data\n            })\n        }).then(response => done(true), response => error(true))\n    }\n\n    const autoLayout = () => {\n        setLayout(true)\n        \n        let gNodes = Object.keys(nodes).map(\n            (key: string) => {\n                return {\n                    'group': 'nodes',\n                    'data': {'id': key},\n                }\n            }\n        )\n\n        let gLinks = Object.keys(connections).map(\n            (key: string) => {\n                return {\n                    group: 'edges',\n                    data: {\n                        id: key,\n                        source: connections[key].from,\n                        target: connections[key].to\n                    }\n                }\n            }\n        )\n        \n        let cy = cytoscape({\n            headless: true\n        })\n\n        cy.add(gNodes as any)\n        cy.add(gLinks as any)\n\n        let layout = cy.layout({\n            name: 'cose'\n        })\n\n        layout.on('layoutstop', () => {\n            Object.keys(nodes).forEach(\n                (key: string) => {\n                    let pos = cy.$id(key).position()\n                    setNodes({\n                        ...nodes,\n                        [key]: {\n                            ...nodes[key],\n                            position: {\n                                x: pos.x * 6,\n                                y: pos.y * 4\n                            }\n                        } \n                    })\n                    setTimeout(\n                        () => setForceRefresh(new Date().getTime()),\n                        50\n                        )\n                    setLayout(false)\n                }\n            )\n        })\n\n        layout.run()\n        \n    }\n\n    return (\n        <EditorData.Provider\n            value={{\n                nodes,\n                setNodes,\n                copyNode,\n                deleteNode,\n                addNode,\n                moveNode,\n                references,\n                addRef,\n                connections,\n                setConnections,\n                importedNodes,\n                importedConnections,\n                importData,\n                writeData,\n                layout,\n                autoLayout,\n                forceRefresh\n            }}\n        >\n            {children}\n        </EditorData.Provider>\n    )\n}\n\nexport default EditorData","import React from 'react'\nimport { EditorStateProvider } from '../../hooks/editorState'\nimport { EditorDataProvider } from '../../hooks/editorData'\nimport { TopMenu, NodeMenu, ContextMenu, Canvas } from '..'\nimport './_main.css'\n\nexport const Main: React.FC = () => {\n    return (\n        <EditorStateProvider>\n            <EditorDataProvider>\n                <TopMenu/>\n                <NodeMenu/>\n                <ContextMenu/>\n                <Canvas/>\n            </EditorDataProvider>\n        </EditorStateProvider>\n    )\n}\n\nexport default Main","import React from 'react'\nimport EditorData from '../../hooks/editorData'\nimport { \n    HTMLTable,\n    Icon,\n    Button,\n    Alert,\n    ButtonGroup\n} from '@blueprintjs/core'\nimport _ from 'lodash'\n\nconst getDifferencesMethods = (\n    node: any,\n    importedMethods: any,\n    methods: any\n) => {\n    let changes: any[] = []\n    let dontChange: any[]\n\n    _.differenceWith(\n        methods, \n        importedMethods, \n        _.isEqual\n    ).forEach(\n        (value: any) => {\n            if (value && value.id) {\n                if (\n                    importedMethods.filter(\n                        (iValue: any) => {\n                            return iValue.id === value.id\n                        }\n                    )[0].type !== value.type\n                ) {\n                    changes.push({\n                        type: 'retype-method',\n                        from: node,\n                        to: value\n                    })\n                    dontChange.push(value.id)\n                } else {\n                    changes.push({\n                        type: 'new-method',\n                        from: node,\n                        to: value\n                    })\n                }\n            } else if (value) {\n                changes.push({\n                    type: 'new-method',\n                    from: node,\n                    to: value\n                })\n            }\n        }\n    )\n    \n    _.differenceWith(\n        importedMethods, \n        methods, \n        _.isEqual\n    ).forEach(\n        (value: any) => {\n            if (value && dontChange.indexOf(value.id)) {\n                changes.push({\n                    type: 'delete-method',\n                    from: node,\n                    to: value\n                })\n            }\n        }\n    )\n\n    return changes\n}\n\nconst getDifferencesProperties = (\n    node: any,\n    importedProperties: any,\n    properties: any\n) => {\n    let changes: any[] = []\n    let dontChange: any[] = []\n    \n    console.log(properties)\n    console.log(importedProperties)\n\n    _.differenceWith(\n        properties, \n        importedProperties, \n        _.isEqual\n    ).forEach(\n        (value: any) => {\n            if (value && value.id) {\n                let sameProperties = importedProperties.filter(\n                    (iValue: any) => {\n                        return iValue.id === value.id\n                    }\n                )\n                \n                if (sameProperties[0].type !== value.type) {\n                    changes.push({\n                        type: 'retype-property',\n                        from: node,\n                        to: value\n                    })\n                    dontChange.push(value.id)\n                } else {\n                    changes.push({\n                        type: 'new-property',\n                        from: node,\n                        to: value\n                    })\n                }\n            } else if (value) {\n                changes.push({\n                    type: 'new-property',\n                    from: node,\n                    to: value\n                })\n            }\n        }\n    )\n    \n    _.differenceWith(\n        importedProperties, \n        properties, \n        _.isEqual\n    ).forEach(\n        (value: any) => {\n            if (value && dontChange.indexOf(value.id) < 0) {\n                changes.push({\n                    type: 'delete-property',\n                    from: node,\n                    to: value\n                })\n            }\n        }\n    )\n\n    return changes\n}\n\nconst getNewNodes = (\n    importedNodes: any,\n    nodes: any\n) => {\n    let changes = Object.keys(nodes).filter(\n        (keyName: string) => {\n            return !importedNodes[keyName]\n        }\n    ).map(\n        (keyName: string) => {\n            let newMap = []\n            newMap.push({\n                type: 'new-classifier',\n                from: null,\n                to: nodes[keyName],\n                nodeKey: keyName\n            })\n            newMap = newMap.concat(\n                getDifferencesProperties(\n                    nodes[keyName],\n                    [],\n                    nodes[keyName]['data']['properties']\n                )\n            )\n            newMap = newMap.concat(\n                getDifferencesMethods(\n                    nodes[keyName],\n                    [],\n                    nodes[keyName]['data']['methods']\n                )\n            )\n            return newMap\n        }\n    )\n    let newNodes: any[] = []\n    changes.forEach(\n        (value: any) => {\n            if (value) {\n                newNodes = newNodes.concat(value)\n            }\n        }\n    )\n    return newNodes.filter(\n        (value: any) => {\n            return value\n        }\n    )\n}\n\nconst getModifiedNodes = (\n    importedNodes: any,\n    nodes: any\n) => {\n    let changes = Object.keys(nodes).filter(\n        (keyName: string) => {\n            return importedNodes[keyName]\n        }\n    ).map(\n        (keyName: string) => {\n            let node = [\n                importedNodes[keyName],\n                nodes[keyName]\n            ]\n            let newMap: any[] = []\n            if(node[0]['data']['properties'])\n                newMap = newMap.concat(\n                    getDifferencesProperties(\n                        nodes[keyName],\n                        node[0]['data']['properties'], \n                        node[1]['data']['properties']\n                    )\n                )\n            if(node[0]['data']['methods'])\n                newMap = newMap.concat(\n                    getDifferencesMethods(\n                        nodes[keyName],\n                        node[0]['data']['methods'], \n                        node[1]['data']['methods']\n                    )\n                )\n            return newMap\n        }\n    )\n    let modifiedNodes: any[] = []\n    changes.forEach(\n        (value: any) => {\n            if (value) {\n                modifiedNodes = modifiedNodes.concat(value)\n            }\n        }\n    )\n    return modifiedNodes.filter(\n        (value: any) => {\n            return value\n        }\n    )\n}\n\nconst getDifferencesNodes = (\n    importedNodes: any,\n    nodes: any\n) => {\n    const newNodes = getNewNodes(importedNodes, nodes)\n    const modifiedNodes = getModifiedNodes(importedNodes, nodes)\n    return ([] as any[]).concat(newNodes, modifiedNodes)\n}\n\nconst getNewConnections = (\n    nodes: any,\n    importedConnections: any,\n    connections: any\n) => {\n    let changes = Object.keys(connections).filter(\n        (keyName: string) => {\n            return !importedConnections[keyName]\n        }\n    ).map(\n        (keyName: string) => {\n            let newMap = []\n            newMap.push({\n                type: 'new-connection',\n                from: [\n                    nodes[\n                        connections[keyName]['from']\n                    ]['name'],\n                    nodes[\n                        connections[keyName]['to']\n                    ]['name']\n                ],\n                to: connections[keyName]\n            })\n            return newMap\n        }\n    )\n\n    let newConnections: any[] = []\n    changes.forEach(\n        (value: any) => {\n            if (value) {\n                newConnections = newConnections.concat(value)\n            }\n        }\n    )\n    return newConnections.filter(\n        (value: any) => {\n            return value\n        }\n    )\n}\n\nconst getModifiedConnections = (\n    importedConnections: any,\n    connections: any\n) => {\n    let dontChange: number[] = []\n    let modifiedConnections = Object.keys(connections).filter(\n        (keyName: string) => {\n            return importedConnections[keyName]\n        }\n    ).filter(\n        (keyName: string) => {\n            return !_.isEqual(\n                connections[keyName],\n                importedConnections[keyName]\n            )\n        }\n    ).map(\n        (keyName: string) => {\n            let changes = []\n            let conn = [\n                importedConnections[keyName],\n                connections[keyName]\n            ]\n            if (conn[0].label !== conn[1].label) {\n                changes.push({\n                    type: 'connection-rename',\n                    from: keyName,\n                    to: conn[1].label\n                })\n                dontChange.push(conn[1].id)\n            }\n            if (conn[0].from === conn[1].to) {\n                changes.push({\n                    type: 'connection-mirror',\n                    from: keyName,\n                    to: conn[1].from\n                })\n                dontChange.push(conn[1].id)\n            }\n            if (conn[0].labelFrom !== conn[1].labelFrom) {\n                changes.push({\n                    type: 'connection-cardinality-from',\n                    from: keyName,\n                    to: conn[1].labelFrom\n                })\n                dontChange.push(conn[1].id)\n            }\n            if (conn[0].labelTo !== conn[1].labelTo) {\n                changes.push({\n                    type: 'connection-cardinality-to',\n                    from: keyName,\n                    to: conn[1].labelTo\n                })\n                dontChange.push(conn[1].id)\n            }\n            if (conn[0].type !== conn[1].type) {\n                changes.push({\n                    type: 'connection-retype',\n                    from: keyName,\n                    to: conn[0].type\n                })\n                dontChange.push(conn[1].id)\n            }\n            return changes\n        }\n    )\n\n    let newConnections: any[] = []\n\n    modifiedConnections.forEach(\n        (value: any) => {\n            if (value) {\n                newConnections = newConnections.concat(value)\n            }\n        }\n    )\n\n    Object.keys(importedConnections).filter(\n        (key: any) => {\n            return !connections[key]\n        }\n    ).forEach(\n        (key: any) => {\n            let connection = importedConnections[key]\n            if (dontChange.indexOf(connection.id) < 0) {\n                newConnections.push({\n                    type: 'delete-connection',\n                    from: key,\n                    to: {id: connection.id}\n                })\n            }\n        }\n    )\n\n    return newConnections.filter(\n        (value: any) => {\n            return value\n        }\n    )\n}\n\nconst getDifferencesConnections = (\n    nodes: any,\n    importedConnections: any,\n    connections: any\n) => {\n    const newConnections = getNewConnections(nodes, importedConnections, connections)\n    const modifiedConnections = getModifiedConnections(importedConnections, connections)\n    return ([] as any[]).concat(newConnections, modifiedConnections)\n}\n\nconst ChangesMenu = () => {\n    const {\n        importedNodes,\n        importedConnections,\n        nodes,\n        connections,\n        writeData\n    } = React.useContext(EditorData)!\n\n    const nodeChanges = React.useMemo(\n        () => getDifferencesNodes(\n            importedNodes,\n            nodes\n        ),\n        [nodes, importedNodes]\n    )\n\n    const connectionChanges = React.useMemo(\n        () => getDifferencesConnections(\n            nodes,\n            importedConnections,\n            connections\n        ),\n        [nodes, connections, importedConnections]\n    )\n\n    const [dialog, setDialog] = React.useState(false)\n    const [done, setDone] = React.useState(false)\n    const [error, setError] = React.useState(false)\n\n    return (\n        <div style={{padding: 22}}>\n            <HTMLTable\n                style={{ width: '100%' }}\n                striped\n                interactive\n            >\n                <thead>\n                    <th></th>\n                    <th>Change</th>\n                    <th>Container</th>\n                    <th>Data</th>\n                    <th></th>\n                </thead>\n                <tbody>\n                {\n                    Object.keys(nodeChanges).map(\n                        (change: any, index: number) => {\n                            if (nodeChanges[index]['type'] === 'new-classifier')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='new-object'/></td>\n                                        <td>Add Class</td>\n                                        <td>-</td>\n                                        <td>{nodeChanges[index]['to']['name']}</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            if (nodeChanges[index]['type'] === 'delete-property')\n                                return (\n                                    <tr\n                                        style={{\n                                            backgroundColor: (\n                                                Object.keys(nodeChanges[index]['from']['instances']).length ? \n                                                'red' : '')\n                                        }}\n                                    >\n                                        <td><Icon icon='remove-row-bottom'/></td>\n                                        <td>Delete Property</td>\n                                        <td>{nodeChanges[index]['from']['name']}</td>\n                                        <td>+{nodeChanges[index]['to']['name']} : {nodeChanges[index]['to']['type']}</td>\n                                        <td>{\n                                            Object.keys(nodeChanges[index]['from']['instances']).length ?\n                                            <Icon icon='warning-sign' intent='danger'/>\n                                            :\n                                            <></>\n                                        }</td>\n                                    </tr>\n                                )\n                            if (nodeChanges[index]['type'] === 'new-property')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='add-row-bottom'/></td>\n                                        <td>Add Property</td>\n                                        <td>{nodeChanges[index]['from']['name']}</td>\n                                        <td>+{nodeChanges[index]['to']['name']} : {nodeChanges[index]['to']['type']}</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            if (nodeChanges[index]['type'] === 'delete-method')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='publish-function'/></td>\n                                        <td>Delete Method</td>\n                                        <td>{nodeChanges[index]['from']['name']}</td>\n                                        <td>{nodeChanges[index]['to']['name']}() : {nodeChanges[index]['to']['type']}</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            if (nodeChanges[index]['type'] === 'new-method')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='function'/></td>\n                                        <td>Add Method</td>\n                                        <td>{nodeChanges[index]['from']['name']}</td>\n                                        <td>{nodeChanges[index]['to']['name']}() : {nodeChanges[index]['to']['type']}</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            if (nodeChanges[index]['type'] === 'retype-method')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='function'/></td>\n                                        <td>Retype Method</td>\n                                        <td>{nodeChanges[index]['from']['name']}</td>\n                                        <td>{nodeChanges[index]['to']['type']}</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            if (nodeChanges[index]['type'] === 'retype-property')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='exclude-row'/></td>\n                                        <td>Retype Property</td>\n                                        <td>{nodeChanges[index]['from']['name']}</td>\n                                        <td>\n                                            {nodeChanges[index]['to']['name']} \n                                            {' -> '} \n                                            {nodeChanges[index]['to']['type']}\n                                        </td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            else {\n                                return <></>\n                            }\n                        }\n                    )\n                }\n                {\n                    Object.keys(connectionChanges).map(\n                        (change: any, index: number) => {\n                            if (connectionChanges[index]['type'] === 'new-connection')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='new-link'/></td>\n                                        <td>Add Connection</td>\n                                        <td>{\n                                           nodes[\n                                               connectionChanges[index]['to']['from']\n                                           ].name + ' - ' + nodes[\n                                            connectionChanges[index]['to']['to']\n                                           ].name\n                                        }</td>\n                                        <td>{\n                                            connectionChanges[index]['to']['labelFrom'] + ' - ' +\n                                            connectionChanges[index]['to']['label'] + ' - ' +\n                                            connectionChanges[index]['to']['labelTo']\n                                        }</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            if (connectionChanges[index]['type'] === 'connection-mirror')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='refresh'/></td>\n                                        <td>Mirror Connection</td>\n                                        <td>{\n                                           nodes[\n                                               connections[connectionChanges[index]['from']]['to']\n                                           ].name + ' - ' + nodes[\n                                            connections[connectionChanges[index]['from']]['from']\n                                           ].name\n                                        }</td>\n                                        <td>{\n                                           nodes[\n                                               connections[connectionChanges[index]['from']]['from']\n                                           ].name + ' - ' + nodes[\n                                            connections[connectionChanges[index]['from']]['to']\n                                           ].name\n                                        }</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            if (connectionChanges[index]['type'] === 'connection-rename')\n                            return (\n                                <tr>\n                                    <td><Icon icon='tag'/></td>\n                                    <td>Rename Connection</td>\n                                    <td>{\n                                       nodes[\n                                           connections[connectionChanges[index]['from']]['from']\n                                       ].name + ' - ' + nodes[\n                                        connections[connectionChanges[index]['from']]['to']\n                                       ].name\n                                    }</td>\n                                    <td>{\n                                        connectionChanges[index]['to']\n                                    }</td>\n                                    <td></td>\n                                </tr>\n                            )\n                            if (connectionChanges[index]['type'] === 'connection-cardinality-from')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='asterisk'/></td>\n                                        <td>Change Cardinality</td>\n                                        <td>{\n                                           nodes[\n                                               connections[connectionChanges[index]['from']]['from']\n                                           ].name + ' - ' + nodes[\n                                            connections[connectionChanges[index]['from']]['to']\n                                           ].name\n                                        }</td>\n                                        <td>{\n                                            nodes[\n                                                connections[connectionChanges[index]['from']]['from']\n                                            ].name + ' : ' + connectionChanges[index]['to']\n                                        }</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            if (connectionChanges[index]['type'] === 'connection-cardinality-to')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='asterisk'/></td>\n                                        <td>Change Cardinality</td>\n                                        <td>{\n                                           nodes[\n                                               connections[connectionChanges[index]['from']]['from']\n                                           ].name + ' - ' + nodes[\n                                            connections[connectionChanges[index]['from']]['to']\n                                           ].name\n                                        }</td>\n                                        <td>{\n                                            nodes[\n                                                connections[connectionChanges[index]['from']]['to']\n                                            ].name + ' : ' + connectionChanges[index]['to']\n                                        }</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            if (connectionChanges[index]['type'] === 'connection-retype')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='wrench'/></td>\n                                        <td>Retype Connection</td>\n                                        <td>{\n                                           nodes[\n                                               connections[connectionChanges[index]['from']]['from']\n                                           ].name + ' - ' + nodes[\n                                            connections[connectionChanges[index]['from']]['to']\n                                           ].name\n                                        }</td>\n                                        <td>{\n                                            connectionChanges[index]['to'][0].toUpperCase() +\n                                            connectionChanges[index]['to'].substring(1) +\n                                            ' -> ' +\n                                            connections[connectionChanges[index]['from']]['type'][0].toUpperCase() + \n                                            connections[connectionChanges[index]['from']]['type'].substring(1)\n                                        }</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            if (connectionChanges[index]['type'] === 'delete-connection')\n                                return (\n                                    <tr>\n                                        <td><Icon icon='graph-remove'/></td>\n                                        <td>Delete Connection</td>\n                                        <td>{\n                                           nodes[\n                                               importedConnections[connectionChanges[index]['from']]['from']\n                                           ].name\n                                        }</td>\n                                        <td>-</td>\n                                        <td></td>\n                                    </tr>\n                                )\n                            else\n                                return <>{connectionChanges[index]['type']}</>\n                        }\n                    )\n                }\n                </tbody>\n            </HTMLTable>\n            {\n                nodeChanges.length || connectionChanges.length ?\n                    <>\n                        <ButtonGroup style={{padding: 32}} fill>\n                            <Button \n                                onClick={() => setDialog(true)}\n                                intent=\"primary\"\n                            >Push to Backend</Button>\n                        </ButtonGroup>\n                        <Alert\n                            className='bp3-dark'\n                            intent='warning'\n                            confirmButtonText='Yes'\n                            icon='cloud-upload'\n                            cancelButtonText='No'\n                            isOpen={dialog}\n                            onClose={() => setDialog(false)}\n                            onConfirm={() => {\n                                let changesToPush: any[] = []\n                                changesToPush = changesToPush.concat(\n                                    nodeChanges.map(\n                                        (value: any) => {\n                                            return {\n                                                ...value,\n                                                key: value['from'],\n                                                from: nodes[value.from]\n                                            }\n                                        }\n                                    )\n                                )\n                                changesToPush = changesToPush.concat(\n                                    connectionChanges.map(\n                                        (value: any) => {\n                                            return {\n                                                ...value,\n                                                key: value['from'],\n                                                from: connections[value.from]\n                                            }\n                                        }\n                                    )\n                                )\n                                writeData(changesToPush, setDone, setError)\n                            }}\n                        >\n                            Are you sure you want to push the changes,\n                            this will overwrite the existing application\n                            structure and is an irreversible action.\n                        </Alert>\n                    </>\n                    :\n                    <div style={{margin: 32, textAlign: 'center', padding: 32, fontSize: 21}}>\n                        <Icon \n                            style={{\n                                marginRight: 16\n                            }}\n                            icon='clean' \n                            intent='success'\n                            iconSize={24}\n                        />\n                        No changes to push\n                    </div>\n            }\n            <Alert\n                icon=\"clean\"\n                className='bp3-dark'\n                intent=\"success\"\n                isOpen={done}\n                onClose={() => setDone(false)}\n            >\n                Successfully pushed to backend!\n            </Alert>\n            <Alert\n                icon=\"clean\"\n                className='bp3-dark'\n                intent=\"danger\"\n                isOpen={error}\n                onClose={() => setError(false)}\n            >\n                Couldn't push to backend!\n            </Alert>\n        </div>\n    )\n}\n\nexport default ChangesMenu\n","import React from 'react'\nimport { \n    Header, \n    HeaderName,\n    HeaderNavigation,\n    HeaderMenuItem\n} from 'carbon-components-react'\nimport {\n    Icon,\n    Alert,\n    Drawer\n} from '@blueprintjs/core'\nimport EditorData from '../../hooks/editorData'\nimport ChangesMenu from '../../editor/ChangesMenu'\n\nexport const TopMenu: React.FC = (props) => {\n    const { \n        importData, \n        references,\n        autoLayout\n    } = React.useContext(EditorData)!\n\n    const [writeDialog, setWriteDialog] = React.useState(false)\n    const [readDialog, setReadDialog] = React.useState(false)\n\n    return (\n        <>\n        <Drawer\n            isOpen={writeDialog}\n            onClose={() => setWriteDialog(false)}\n            usePortal={true}\n            portalContainer={references['root']!.current!}\n            style={{\n                zIndex: 8085,\n                height: '66vh'\n            }}\n            className='bp3-dark'\n            position='bottom'\n            title='Write to Backend'\n        >\n            <ChangesMenu/>\n        </Drawer>\n        <Alert\n            isOpen={readDialog}\n            onClose={() => setReadDialog(false)}\n            className='bp3-dark'\n            icon='cloud-download'\n            intent='warning'\n            onConfirm={() => importData()}\n            cancelButtonText='Cancel'\n        >\n            This will forcefully overwrite everything\n            in the current editor state. Are you sure?\n        </Alert>\n        <Header aria-label=\"ngUML Editor\">\n            <HeaderName prefix=\"ngUML\">\n                Editor\n            </HeaderName>\n            <HeaderNavigation aria-label='ngUML [Editor]'>\n                <HeaderMenuItem\n                    onClick={() => setReadDialog(true)}\n                >\n                    <Icon icon='cloud-download'/>\n                    &nbsp;\n                    Read from Backend\n                </HeaderMenuItem>\n                <HeaderMenuItem\n                    onClick={() => setWriteDialog(true)}\n                >\n                    <Icon icon='cloud-upload'/>\n                    &nbsp;\n                    Push to Backend\n                </HeaderMenuItem>\n                <HeaderMenuItem\n                    onClick={autoLayout}\n                >\n                    <Icon icon='graph'/>\n                    &nbsp;\n                    Auto-Layout (CoSE)\n                </HeaderMenuItem>\n            </HeaderNavigation>\n        </Header>\n        </>\n    )\n}\n\nexport default TopMenu","import React from 'react'\nimport EditorData from '../../../hooks/editorData'\nimport {\n    HTMLSelect,\n    ControlGroup,\n    InputGroup,\n    Button,\n    TextArea\n} from '@blueprintjs/core'\n\ninterface IMethod {\n    name: string;\n    type: string;\n    code: string;\n}\n\ninterface IMethods {\n    node: string\n}\n\nconst Methods: React.FC<IMethods> = ({node}) => {\n    const [newType, setNewType] = React.useState<string>('string')\n    const [newMethod, setNewMethod] = React.useState<string>('')\n    const {nodes, setNodes} = React.useContext(EditorData)!\n    const methods : any = nodes[node]['data']['methods'] ?? []\n\n    const setMethods = (newMethods: any) => {\n        setNodes({\n            ...nodes,\n            [node]: {\n                ...nodes[node],\n                data: {\n                    ...nodes[node]['data'],\n                    methods: newMethods\n                }\n            }\n        });\n    }\n    \n    const addNewMethod = () => {\n        if (newType && newMethod) {\n            let toAdd: IMethod = {\n                name: newMethod,\n                type: newType,\n                code: ''\n            }\n            methods.push(toAdd)\n            setMethods(methods)\n            setNewMethod('')\n            setNewType('string')\n        }\n    }\n\n    const editMethod = (\n        index: number, \n        field: string, \n        value: string\n    ) => {\n        if (methods[index]) {\n            if (field === 'name') {\n                methods[index]['name'] = value\n                setMethods(methods)\n            } else if (field === 'type') {\n                methods[index]['type'] = value\n                setMethods(methods)\n            } else if (field === 'code') {\n                methods[index]['code'] = value\n                setMethods(methods)\n            }\n        }\n    }\n\n    const deleteMethod = (\n        index: number\n    ) => {\n        delete methods[index]\n        methods.splice(index, 1)\n        setMethods(methods)\n    }\n\n    return (\n        <div style={{\n            padding: '8px 0',\n            width: '100%',\n            borderTop: 'solid 1px #666'\n        }}>\n            {methods.map((value: IMethod, index: number) => {\n                if (value) {\n                    return (\n                        <div style={{\n                            borderBottom: 'solid 1px #666',\n                            margin: '8px'\n                        }}>\n                            <ControlGroup \n                                style={{margin: '2px 0 2px 0'}}\n                                fill\n                            >\n                                <InputGroup\n                                    placeholder='methodName'\n                                    value={value.name}\n                                    onChange={(e) => {editMethod(\n                                        index,\n                                        'name',\n                                        e.target.value\n                                    )}}\n                                />\n                                <HTMLSelect\n                                    options={[\n                                        'string',\n                                        'int',\n                                        'bool'\n                                    ]}\n                                    value={value.type}\n                                    onChange={(e) => editMethod(\n                                        index,\n                                        'type',\n                                        e.target.value\n                                    )}\n                                />\n                                <Button\n                                    intent='danger'\n                                    icon='delete'\n                                    onClick={() => deleteMethod(index)}\n                                />\n                            </ControlGroup>\n                            <TextArea\n                                fill\n                                style={{\n                                    margin: '8px 0'\n                                }}\n                                placeholder='Code...'\n                                growVertically={true}\n                                value={value.code}\n                                onChange={(e) => editMethod(\n                                    index,\n                                    'code',\n                                    e.target.value\n                                )}\n                            />\n                        </div>\n                    )  \n                } else { return <></> }\n            })}\n            <div \n                style={{margin: '8px'}}\n            >\n                <ControlGroup \n                    fill\n                >\n                    <InputGroup\n                        placeholder='newMethod'\n                        value={newMethod}\n                        onChange={(e) => setNewMethod(e.target.value)}\n                    />\n                    <HTMLSelect\n                        options={[\n                            'string',\n                            'int',\n                            'bool'\n                        ]}\n                        value={newType}\n                        onChange={(e) => setNewType(e.target.value)}\n                    />\n                    <Button\n                        intent='success'\n                        icon='add'\n                        onClick={() => addNewMethod()}\n                    />\n                </ControlGroup>\n            </div>\n        </div>\n    )\n}\n\nexport default Methods","import React from 'react'\nimport EditorData from '../../../hooks/editorData'\nimport {\n    HTMLSelect,\n    ControlGroup,\n    InputGroup,\n    Button\n} from '@blueprintjs/core'\n\ninterface IProperty {\n    name: string;\n    type: string;\n}\n\ninterface IProperties {\n    node: string\n}\n\nconst Properties: React.FC<IProperties> = ({node}) => {\n    const [newType, setNewType] = React.useState<string>('string')\n    const [newProperty, setNewProperty] = React.useState<string>('')\n    const {nodes, setNodes} = React.useContext(EditorData)!\n    const properties : any = nodes[node]['data']['properties'] ?? []\n\n    const setProperties = (newProperties: any) => {\n        setNodes({\n            ...nodes,\n            [node]: {\n                ...nodes[node],\n                data: {\n                    ...nodes[node]['data'],\n                    properties: newProperties\n                }\n            }\n        })\n    }\n    \n    const addNewProperty = () => {\n        if (newType && newProperty) {\n            let toAdd: IProperty = {\n                name: newProperty,\n                type: newType\n            }\n            properties.push(toAdd)\n            setProperties(properties)\n            setNewProperty('')\n            setNewType('string')\n        }\n    }\n\n    const editProperty = (\n        index: number, \n        field: string, \n        value: string\n    ) => {\n        if (properties[index]) {\n            if (field === 'name') {\n                properties[index]['name'] = value\n                setProperties(properties)\n            } else if (field === 'type') {\n                properties[index]['type'] = value\n                setProperties(properties)\n            }\n        }\n    }\n\n    const deleteProperty = (\n        index: number\n    ) => {\n        delete properties[index]\n        properties.splice(index, 1)\n        setProperties(properties)\n    }\n\n    return (\n        <div style={{\n            margin: '8px',\n            width: '100%',\n            padding: '16px 0 0 0',\n            borderTop: 'solid 1px #666'\n        }}>\n            {properties.map((value: IProperty, index: number) => {\n                if (value) {\n                    return (\n                        <div style={{margin: '8px'}}>\n                            <ControlGroup \n                                style={{margin: '2px 0 2px 0'}}\n                                fill\n                            >\n                                <InputGroup\n                                    placeholder='propertyName'\n                                    value={value.name}\n                                    onChange={(e) => {editProperty(\n                                        index,\n                                        'name',\n                                        e.target.value\n                                    )}}\n                                />\n                                <HTMLSelect\n                                    options={[\n                                        'string',\n                                        'int',\n                                        'bool'\n                                    ]}\n                                    value={value.type}\n                                    onChange={(e) => editProperty(\n                                        index,\n                                        'type',\n                                        e.target.value\n                                    )}\n                                />\n                                <Button\n                                    intent='danger'\n                                    icon='delete'\n                                    onClick={() => deleteProperty(index)}\n                                />\n                            </ControlGroup>\n                        </div>\n                    )    \n                } else { return <></> }\n            })}\n            <div style={{ margin: '8px'}}>\n                <ControlGroup \n                    fill\n                    style={{margin: '2px 0 2px 0'}}\n                >\n                    <InputGroup\n                        placeholder='newProperty'\n                        value={newProperty}\n                        onChange={(e) => setNewProperty(e.target.value)}\n                    />\n                    <HTMLSelect\n                        options={[\n                            'string',\n                            'int',\n                            'bool'\n                        ]}\n                        value={newType}\n                        onChange={(e) => setNewType(e.target.value)}\n                    />\n                    <Button\n                        intent='success'\n                        icon='add'\n                        onClick={() => addNewProperty()}\n                    />\n                </ControlGroup>\n            </div>\n        </div>\n    )\n}\n\nexport default Properties","import React from 'react'\n\ninterface IProperty {\n    name: string;\n    type: string;\n}\n\ninterface IMethod {\n    name: string;\n    type: string;\n    code: string;\n}\n\ninterface INode {\n    name: string;\n    type: string;\n    position: {\n        x: number, \n        y: number\n    };\n    data: Record<\n        string,\n        any\n    >;\n}\n\ninterface IClassNode {\n    node: INode;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nconst classWrapper: React.CSSProperties = {\n    fontFamily: 'monospace',\n    border: 'solid',\n    borderColor: 'black',\n    borderWidth: 1,\n    display: 'block',\n    backgroundColor: 'white'\n}\n\nconst className: React.CSSProperties = {\n    borderBottom: 'solid',\n    borderColor: 'black',\n    textAlign: 'center',\n    borderWidth: 1,\n    paddingTop: 8,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 8\n}\n\nconst classProperties: React.CSSProperties = {\n    display: 'flex',\n    flexDirection: 'column',\n    borderBottom: 'solid',\n    borderColor: 'black',\n    borderWidth: 1,\n    paddingTop: 8,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingBottom: 8,\n    textAlign: 'left',\n    lineHeight: 1.5\n}\n\nconst ClassNode: React.FC<IClassNode> = ({\n    node,\n    style: propStyle,\n    className: propClassName,\n}) => {\n    const properties : IProperty[] = node['data']['properties'] ?? [] \n    const methods : IMethod[] = node['data']['methods'] ?? []\n\n    return (\n        <div \n            style={{\n                ...classWrapper,\n                ...propStyle\n            }}\n            className={propClassName}\n        >\n            <div style={className}>\n                {node.name}\n            </div>\n            <div style={classProperties}>\n                {properties.map((value: IProperty, index: number) => {\n                    if (value) {\n                        return (\n                            <span key={index} className=\"nguml-class-property\">\n                                +{value.name} : {value.type}\n                            </span>\n                        )\n                    } else {\n                        return <></>\n                    }\n                })}\n            </div>\n            <div style={classProperties}>\n                {methods.map((value: IMethod, index: number) => {\n                    if (value) {\n                        return (\n                            <span key={index} className=\"nguml-class-method\">\n                                {value.name}() : {value.type}\n                            </span>\n                        )\n                    } else {\n                        return <></>\n                    }\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default ClassNode\n","import React from 'react'\nimport ClassNode from '../../../diagram/ClassNode'\nimport { \n    EditableText,\n    ControlGroup,\n    Button,\n    Alert,\n    HTMLSelect\n} from '@blueprintjs/core'\n\ninterface IConnection {\n    connectionId: string;\n    connection: any;\n    connections: any;\n    setConnections: (value: any) => void;\n    fromNode: any;\n    toNode: any;\n}\n\nconst Connection : React.FC<IConnection> = ({\n    connectionId,\n    connection,\n    connections,\n    setConnections,\n    fromNode,\n    toNode\n}) => {\n    const [delprompt, setDelprompt] = React.useState(false);\n\n    return (\n        <>\n            <div\n                className='nguml-context-connection-item'\n            >\n                <div style={{transform: 'scale(0.7)', transformOrigin: 'left'}}>\n                    <ClassNode\n                        node={fromNode}\n                    />\n                </div>\n                <EditableText\n                    value={connection.label}\n                    onChange={(target) => {\n                        setConnections({\n                            ...connections,\n                            [connectionId]: {\n                                ...connection,\n                                label: target\n                            }\n                        })\n                    }}\n                />\n                <div style={{transform: 'scale(0.7)', transformOrigin: 'right'}}>\n                    <ClassNode\n                        node={toNode}\n                    />\n                </div>\n            </div>\n            <div\n                className='nguml-context-connection-options'\n            >\n                <ControlGroup fill>\n                    <Button\n                        intent='primary'\n                        icon='refresh'\n                        onClick={() => {\n                            setConnections({\n                                ...connections,\n                                [connectionId]: {\n                                    ...connection,\n                                    from: connection.to,\n                                    to: connection.from,\n                                    labelFrom: connection.labelTo,\n                                    labelTo: connection.labelFrom\n                                }\n                            })\n                        }}\n                    />\n                    <HTMLSelect\n                        options={[\n                            '1',\n                            '*'\n                        ]}\n                        value={connection.labelFrom}\n                        onChange={(e) => {\n                            setConnections({\n                                ...connections,\n                                [connectionId]: {\n                                    ...connection,\n                                    labelFrom: e.target.value\n                                }\n                            })\n                        }}\n                    />\n                    <HTMLSelect\n                        options={[\n                            {\n                                label: 'Generalization',\n                                value: 'generalization'\n                            },\n                            {\n                                label: 'Association',\n                                value: 'association'\n                            },\n                            {\n                                label: 'Composition',\n                                value: 'composition'\n                            },\n                        ]}\n                        value={connection.type}\n                        onChange={(e) => {\n                            setConnections({\n                                ...connections,\n                                [connectionId]: {\n                                    ...connection,\n                                    type: e.target.value\n                                }\n                            })\n                        }}\n                    />\n                    <HTMLSelect\n                        options={[\n                            '1',\n                            '*'\n                        ]}\n                        value={connection.labelTo}\n                        onChange={(e) => {\n                            setConnections({\n                                ...connections,\n                                [connectionId]: {\n                                    ...connection,\n                                    labelTo: e.target.value\n                                }\n                            })\n                        }}\n                    />\n                    <Button\n                        intent='danger'\n                        icon='delete'\n                        onClick={() => setDelprompt(true)}\n                    />\n                    <Alert\n                        className='bp3-dark'\n                        intent='danger'\n                        confirmButtonText='Yes'\n                        icon='delete'\n                        cancelButtonText='No'\n                        isOpen={delprompt}\n                        onClose={() => setDelprompt(false)}\n                        onConfirm={() => {\n                            let newConnections = {...connections}\n                            delete newConnections[connectionId]\n                            setConnections(newConnections)\n                        }}\n                    >\n                        Are you sure you want to delete the connection,\n                        this is an irreversible action.\n                    </Alert>\n                </ControlGroup>\n            </div>\n        </>\n    )\n}\n\nexport default Connection\n","import React from 'react'\nimport EditorData from '../../../hooks/editorData'\nimport { \n    ControlGroup,\n    Button,\n    HTMLSelect,\n    IOptionProps\n} from '@blueprintjs/core'\nimport * as uuid from 'uuid'\nimport Connection from './Connection'\n\ninterface IConnectionsMenu {\n    node: string\n}\n\nexport const Connections: React.FC<IConnectionsMenu> = ({node}) => {\n    const {\n        nodes,\n        connections,\n        setConnections\n    } = React.useContext(EditorData)!\n\n    const [\n        options,\n        setOptions\n    ] = React.useState<IOptionProps[]>([])\n\n    const [\n        newConnection,\n        setNewConnection\n    ] = React.useState('')\n\n    const [\n        newType,\n        setNewType\n    ] = React.useState('')\n\n    React.useEffect(() => {\n        let possibleNodes = Object.keys(nodes).filter(\n            (e) => {\n                return e !== node;\n            }\n        )\n\n        setOptions(possibleNodes.map(\n            (keyName: string, index: number) => {\n                return {\n                    label: nodes[keyName].name,\n                    value: keyName\n                }\n            }\n        ))\n    }, [nodes, node, connections])\n\n    const createConnection = () => {\n        let nType = newType !== '' ? newType : 'generalization'\n\n        let labels = () => {\n            if (nType === 'generalization') {\n                return {\n                    from: '*', \n                    to: '*'\n                }\n            } else if (nType === 'composition') {\n                return {\n                    from: '1',\n                    to: '*'\n                }\n            } else if (nType === 'composition') {\n                return {\n                    from: '1',\n                    to: '*'\n                }\n            } else {\n                return {\n                    from: '1',\n                    to: '1'\n                }\n            }\n        }\n\n        let connection = {\n            name: '',\n            type: newType !== '' ? newType : 'generalization',\n            from: node,\n            to: newConnection !== '' ? newConnection : String(options[0].value),\n            label: 'Connection',\n            labelFrom: labels().from,\n            labelTo: labels().to\n        }\n        setConnections({\n            ...connections,\n            [uuid.v4()]: connection\n        })\n        setNewConnection('')\n        setNewType('')\n    }\n\n    return (\n        <>\n            <div className=\"nguml-context-connection\">\n                <div>\n                    {\n                        Object.keys(connections).map((keyName: string, index: number) => {\n                            if (\n                                connections[keyName].from === node || \n                                connections[keyName].to === node\n                            ) {\n                                let connection = connections[keyName]\n                                return (\n                                    <Connection\n                                        connectionId={keyName}\n                                        connection={connection}\n                                        fromNode={nodes[connection.from]}\n                                        toNode={nodes[connection.to]}\n                                        connections={connections}\n                                        setConnections={setConnections}\n                                    />\n                                )\n                            } else { return <>{null}</> }\n                        })\n                    }\n                </div>\n                {\n                    options.length > 0 ?\n                    <ControlGroup fill>\n                        <HTMLSelect\n                            options={options}\n                            value={newConnection}\n                            onChange={(e) => setNewConnection(e.target.value)}\n                        />\n                        <HTMLSelect\n                            options={[\n                                {\n                                    label: 'Generalization',\n                                    value: 'generalization'\n                                },\n                                {\n                                    label: 'Association',\n                                    value: 'association'\n                                },\n                                {\n                                    label: 'Composition',\n                                    value: 'composition'\n                                },\n                            ]}\n                            value={newType}\n                            onChange={(e) => setNewType(e.target.value)}\n                        />\n                        <Button \n                            intent=\"success\"\n                            icon=\"link\"\n                            onClick={() => createConnection()}\n                        />\n                    </ControlGroup>\n                    :\n                    <></>\n                }\n            </div>\n        </>\n    )\n}\n\nexport default Connections","import React from 'react'\nimport {\n    HTMLTable\n} from '@blueprintjs/core'\n\ninterface IInstances {\n    instances: any\n}\n\nconst Instances: React.FC<IInstances> = ({instances}) => {\n    return (\n        <div style={{padding: 16, width: '100%'}}>\n            <HTMLTable interactive striped style={{width: '100%'}}>\n                <thead>\n                    {Object.keys(instances).map((value: string) => { return (\n                        <th>{value}</th>\n                    )})}\n                </thead>\n                <tbody>\n                    {Object.keys(instances).map((value: string) => { return (\n                        <tr>\n                            {instances[value].map((dataPoint: string) => {return (\n                                <td>{dataPoint}</td>\n                            )})}\n                        </tr>\n                    )})}\n                </tbody>\n            </HTMLTable>    \n        </div>\n    )\n}\n\nexport default Instances\n","import React from 'react'\nimport EditorData from '../../../hooks/editorData'\nimport EditorState from '../../../hooks/editorState'\nimport Methods from './Methods'\nimport Properties from './Properties'\nimport Connections from './Connections'\nimport Instances from './Instances'\nimport { \n    ButtonGroup,\n    Button,\n    Drawer,\n    EditableText,\n    Alert,\n    Icon\n} from '@blueprintjs/core'\nimport './_classmenu.css'\n\n\ninterface IMenu {\n    node: string\n}\n\nexport const Menu: React.FC<IMenu> = ({node}) => {\n    const {\n        nodes,\n        importedNodes,\n        setNodes,\n        deleteNode,\n        copyNode,\n        references\n    } = React.useContext(EditorData)!\n\n    const {\n        setFocus\n    } = React.useContext(EditorState)!\n\n    const [\n        drawer,\n        setDrawer\n    ] = React.useState(false)\n\n    const isImported = React.useMemo(() => {\n        return Object.keys(importedNodes).indexOf(node) >= 0\n    }, [node, importedNodes])\n\n    const [delPrompt, setDelPrompt] = React.useState(false)\n\n    return (\n        <>\n            {\n                isImported ?\n                <div style={{\n                    width: '100%',\n                    padding: '8px',\n                    textAlign: 'center'\n                }}>\n                    <Icon\n                        icon='lock'\n                        iconSize={32}\n                    />\n                </div>\n                :\n                <></>\n            }\n            <div \n                className=\"bp3-dark nguml-context-menu\" \n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    justifyContent: 'center'\n                }}\n            >\n                <Alert\n                    className='bp3-dark'\n                    intent='danger'\n                    confirmButtonText='Yes'\n                    icon='delete'\n                    cancelButtonText='No'\n                    isOpen={delPrompt}\n                    onClose={() => setDelPrompt(false)}\n                    onConfirm={() => {\n                        setFocus(undefined);\n                        deleteNode(node);\n                    }}\n                >\n                    Are you sure you want to delete the connection,\n                    this is an irreversible action.\n                </Alert>\n                <ButtonGroup large fill>\n                    <Button \n                        icon=\"duplicate\"\n                        onClick={() => {\n                            copyNode(node);\n                        }}\n                    />\n                    <Button \n                        icon=\"trash\"\n                        onClick={() => setDelPrompt(true)}\n                        disabled={\n                            isImported\n                        }\n                    />\n                    <Button \n                        icon=\"cube\"\n                        disabled={\n                            !Object.keys(nodes[node].instances).length\n                        }\n                        onClick={\n                            () => {\n                                setDrawer(true);\n                            }\n                        }\n                    />\n                    <Drawer\n                            usePortal\n                            className='bp3-dark'\n                            portalClassName='nguml-overlay'\n                            position='bottom'\n                            portalContainer={references['root'].current!}\n                            onClose={() => setDrawer(false)}\n                            isOpen={drawer}\n                            title=\"Instances / Items in Class\"\n                    >\n                        <Instances instances={nodes[node].instances}/>\n                    </Drawer>\n                </ButtonGroup>\n                <EditableText\n                    value={nodes[node].name}\n                    onChange={(e) => {\n                        setNodes({\n                            ...nodes,\n                            [node]: {\n                                ...nodes[node],\n                                name: e\n                            }\n                        });\n                    }}\n                    maxLength={64}\n                    className='nguml-class-menu-title'\n                    disabled={isImported}\n                />\n                <Properties node={node}/>\n                <Methods node={node}/>\n                <Connections node={node}/>\n            </div>\n        </>\n    )\n}\n\nexport default Menu\n","import React from 'react'\nimport {\n    HeaderPanel\n} from 'carbon-components-react'\nimport EditorState from '../../hooks/editorState'\nimport EditorData from '../../hooks/editorData'\nimport { Menu as ClassMenu } from './ClassMenu/Menu'\nimport './_contextmenu.css'\n\nconst loadMenu: \n    (\n        node?: any,\n        focus?: string\n    ) => \n    React.ReactElement = \n    (node,focus) => {\n    if (!node || !focus) {\n        return (\n            <></>\n        )\n    } else if (node.type === 'Class') {\n        return (\n            <ClassMenu\n                node={focus}\n            />\n        )\n    } else if (node.type === 'Enum') {\n        return (\n            <div style={{color: 'red', textAlign: 'center', padding: 16}}>\n                Context Menu not Implemented!\n            </div>\n        )\n    } else {\n        return (\n            <div style={{color: 'red', textAlign: 'center', padding: 16}}>\n                Context Menu not Implemented!\n            </div>\n        )\n    }\n}\n\nexport const ContextMenu: React.FC = () => {\n    const {focus} = React.useContext(EditorState)!\n    const {nodes} = React.useContext(EditorData)!\n    \n    return (\n        <HeaderPanel\n            expanded={\n                focus ? true : false\n            }\n            style={{\n                overflowY: 'auto'\n            }}\n        >\n            {\n                loadMenu(nodes[focus!], focus)\n            }\n        </HeaderPanel>\n    )\n}\n\nexport default ContextMenu","import React from 'react'\nimport { \n    SideNav, \n    SideNavItems, \n    SideNavMenu, \n    SideNavMenuItem \n} from 'carbon-components-react'\nimport * as Feather from 'react-feather';\nimport './_nodemenu.css'\nimport EditorData from '../../hooks/editorData'\n\nexport const NodeMenu: React.FC = (props) => {\n    const { addNode } = React.useContext(EditorData)!\n\n    return (\n        <SideNav\n            isRail\n            expanded={false}\n            isChildOfHeader={false}\n            aria-label=\"Side navigation\"\n        >\n            <SideNavItems\n                className='nguml-nodemenu'\n            >\n                <SideNavMenu \n                    renderIcon={Feather.Plus}\n                    title=\"Add\"\n                    defaultExpanded={true}\n                >\n                    <SideNavMenuItem\n                        onClick={() => addNode('Class')}\n                    >\n                        Class\n                    </SideNavMenuItem>\n                    <SideNavMenuItem\n                        onClick={() => addNode('Enum')}\n                    >\n                        Enum\n                    </SideNavMenuItem>\n                </SideNavMenu>\n            </SideNavItems>\n        </SideNav>\n    )\n}\n\nexport default NodeMenu","import React from 'react'\n\ninterface IEnumNode {\n    node: any;\n}\n\nconst EnumNode: React.FC<IEnumNode> = ({node}) => {\n    return (\n        <div>\n            {node.name}\n        </div>\n    )\n}\n\nexport default EnumNode\n","import React from 'react'\nimport {\n    ClassNode,\n    EnumNode\n} from '../'\n\ninterface IDiagramNode {\n    node: any;\n}\n\nconst DiagramNode: React.FC<IDiagramNode> = ({node}) => {\n    if (node.type === 'Class')\n        return (\n            <ClassNode node={node}/>\n        )\n    if (node.type === 'Enum')\n        return (\n            <EnumNode node={node}/>\n        )\n    else\n        return (\n            <div>\n                {node.type} not implemented\n            </div>\n        )\n}\n\nexport default DiagramNode\n","import React from 'react'\nimport EditorState from '../../hooks/editorState'\nimport EditorData from '../../hooks/editorData'\nimport DiagramNode from '../../diagram/DiagramNode'\nimport Draggable from 'react-draggable'\nimport './_node.css'\n\ninterface INode {\n    node: string\n}\n\nconst Node: React.FC<INode> = ({node}) => {\n    const {\n        setPanning,\n        setFocus,\n        setRedraw\n    } = React.useContext(EditorState)!\n\n    const {\n        nodes,\n        moveNode,\n        references, \n        addRef\n    } = React.useContext(EditorData)!\n    \n    const nodeRef = React.useRef<HTMLDivElement>(null)\n\n    const handleMove = (x: number, y: number) => {\n        moveNode(\n            node,\n            x,\n            y\n        )\n    }\n\n    React.useEffect(() => {\n        if (!references[node]) {\n            addRef(\n                node,\n                nodeRef\n            )\n        }\n        if (references[node] && !(references[node]).current) {\n            addRef(\n                node,\n                nodeRef\n            )\n        }\n    });\n    \n    return (\n        <Draggable \n            nodeRef={nodeRef}\n            grid={[8, 8]}\n            position={nodes[node].position}\n            onStop={(event, {lastX, lastY}) => {\n                handleMove(lastX, lastY);\n                setTimeout(() => setFocus(node), 1);\n            }}\n            onStart={() => {\n                setPanning(false);\n                setFocus(undefined);\n            }}\n            onDrag={() => {\n                setTimeout(() => setRedraw(new Date().getTime()), 15);\n            }}\n        >\n            <div\n                className=\"nguml-diagram-node\"\n                id={'nodeRef-' + node}\n                onMouseEnter={() => setPanning(false)}\n                onMouseOut={() => setPanning(true)}\n                onClick={() => {\n                    setFocus(node);\n                }}\n                tabIndex={0}\n                ref={nodeRef}\n            >\n                <DiagramNode\n                    node={nodes[node]}\n                />\n            </div>\n        </Draggable>\n    )\n}\n\nexport default Node","import React from 'react'\nimport Node from '../Node'\nimport EditorData from '../../hooks/editorData'\nimport { Loading } from 'carbon-components-react'\n\nconst NodeGrid: React.FC = () => {\n    const {\n        nodes,\n        references,\n        layout,\n        addRef\n    } = React.useContext(\n        EditorData\n    )!\n\n    const gridRef = React.useRef<HTMLDivElement>(null)\n\n    React.useEffect(() => {\n        if (!references['grid']) {\n            addRef('grid', gridRef)\n        } else if (!references['grid'].current) {\n            addRef('grid', gridRef)\n        }\n    })\n\n    return (\n        <div ref={gridRef}>\n            {\n                Object.keys(nodes).map((keyName: string, index: number) => {\n                    return (\n                        <Node \n                            key={keyName}\n                            node={keyName}\n                        />\n                    )\n                })\n            }   \n        </div>\n    )\n}\n\nexport default NodeGrid\n","interface ICalcArrow {\n    fromRect: DOMRect,\n    toRect: DOMRect,\n    gridRect: DOMRect,\n    offset: number\n}\n\ninterface RCalcArrow {\n    from: {x: number, y: number};\n    to: {x: number, y: number};\n    length: number;\n    arrowDirection: number\n}\n\ninterface RCalcAnchor {\n    from: {x: number, y: number};\n    to: {x: number, y: number};\n    fromOrientation?: number;\n    toOrientation?: number;\n}\n\ninterface RCalcBox {\n    top: number,\n    left: number,\n    right: number,\n    bottom: number\n}\n\ninterface RAnchorPos {\n    x: number,\n    y: number\n}\n\nconst calcBox: (box: DOMRect, canvas: DOMRect) => RCalcBox = (\n    box,\n    canvas\n) => {\n    return {\n        top: box.top - canvas.top,\n        bottom: box.top + box.height - canvas.top,\n        left: box.left - canvas.left,\n        right: box.left + box.width - canvas.left\n    }\n}\n\nconst calcAnchorPos: (\n    box: DOMRect,\n    canvas: DOMRect,\n    anchor: number,\n    offset: number\n) => RAnchorPos = (\n    box,\n    canvas,\n    anchor,\n    offset\n) => {\n    if (anchor === 0) {\n        // Top\n        return {\n            x: box.left - canvas.x + (box.width / 2) + 16 * offset,\n            y: box.top - canvas.y\n        }\n    } else if (anchor === 1) {\n        // Left\n        return {\n            x: box.left - canvas.x,\n            y: box.bottom - canvas.y - (box.height / 2) + 16 * offset\n        }\n    } else if (anchor === 2) {\n        // Bottom\n        return {\n            x: box.left - canvas.x + (box.width / 2) + 16 * offset,\n            y: box.bottom - canvas.y\n        }\n    } else {\n        // Right\n        return {\n            x: box.right - canvas.x,\n            y: box.top - canvas.y + (box.height / 2) + 16 * offset\n        }\n    }\n}\n\nconst calcAnchor: (\n    fromRect: DOMRect, \n    toRect: DOMRect, \n    canvas: DOMRect,\n    offset: number\n) => RCalcAnchor = (\n    fromRect, \n    toRect,\n    canvas,\n    offset\n) => {\n    const fromBox = calcBox(fromRect, canvas)\n    const toBox = calcBox(toRect, canvas)\n\n    let anchorDistances = [\n        toBox.top - fromBox.bottom,\n        toBox.left - fromBox.right,\n        fromBox.top - toBox.bottom,\n        fromBox.left - toBox.right\n    ]\n    \n    let anchor = anchorDistances.indexOf(\n        Math.max.apply(Math, anchorDistances)\n    )\n\n    let fromAnchor = calcAnchorPos(\n        fromRect, \n        canvas, \n        ((anchor + 2) % 4),\n        offset\n    )\n    \n    let toAnchor = calcAnchorPos(\n        toRect, \n        canvas, \n        anchor,\n        offset\n    )\n\n    return {\n        from: fromAnchor,\n        to: toAnchor,\n        fromOrientation: ((anchor + 2) % 4),\n        toOrientation: anchor\n    }\n}\n\nconst calcDirection: (\n    anchor: RCalcAnchor\n) => number = (\n    anchor\n) => {\n    return (Math.atan2(\n            anchor.from.y - anchor.to.y, \n            anchor.from.x - anchor.to.x\n        ) * 180 / Math.PI - 180) % 360;\n}\n\nconst calcLength: (\n    anchor: RCalcAnchor\n) => number = (\n    anchor\n) => {\n    return Math.hypot(\n        anchor.to.x - anchor.from.x,\n        anchor.to.y - anchor.from.y\n    )\n}\n\nexport const calcArrow: (value: ICalcArrow) => RCalcArrow = ({\n    fromRect: from,\n    toRect: to,\n    gridRect: canvas,\n    offset\n}) => {\n    let anchor = calcAnchor(\n        from, \n        to, \n        canvas, \n        offset\n    )\n\n    let direction = calcDirection(anchor)\n    let length = calcLength(anchor)\n    \n    return {\n        ...anchor,\n        length: length,\n        arrowDirection: direction\n    }\n};","import React from 'react'\nimport { calcArrow } from './calcArrow'\n\ninterface IArrow {\n    fromRef: React.RefObject<HTMLElement>;\n    toRef: React.RefObject<HTMLElement>;\n    gridRef: React.RefObject<HTMLElement>;\n    fromLabel?: string | React.ReactElement;\n    toLabel?: string | React.ReactElement;\n    label?: string | React.ReactElement;\n    fromArrowHead?: React.ReactElement;\n    toArrowHead?: React.ReactElement;\n    offset: number;\n}\n\nconst sideLabelStyle : React.CSSProperties = {\n    fontSize: 10,\n    height: '16px',\n    verticalAlign: 'middle',\n    lineHeight: '16px',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    fontWeight: 'bolder',\n    overflow: 'hidden',\n    background: 'white'\n}\n\nconst middleLabelStyle : React.CSSProperties = {\n    display: 'inline-block',\n    verticalAlign: 'middle',\n    backgroundColor: 'white',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden'\n}\n\nconst labelStyle : React.CSSProperties = {\n    position: 'absolute',\n    height: 16,\n    overflow: 'hidden',\n    transformOrigin: 'left',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignContent: 'space-between',\n}\n\nconst arrowHeadStyle: React.CSSProperties = {\n    position: 'absolute',\n    width: 16,\n    height: 16,\n    overflow: 'hidden',\n}\n\nconst Arrow: React.FC<IArrow> = ({\n    fromRef,\n    toRef,\n    gridRef,\n    fromLabel,\n    toLabel,\n    label,\n    fromArrowHead,\n    toArrowHead,\n    offset\n}) => {\n    if (\n        !fromRef || \n        !toRef || \n        !gridRef ||\n        !fromRef.current || \n        !toRef.current ||\n        !gridRef.current\n        ) {\n        return (\n            <>\n            </>\n        )\n    } else {\n        const fromRect = fromRef.current.getBoundingClientRect()\n        const toRect = toRef.current.getBoundingClientRect()\n        const gridRect = gridRef.current.getBoundingClientRect()\n        \n        const arrow = calcArrow({\n            fromRect,\n            toRect,\n            gridRect,\n            offset\n        })\n\n        const flip = () => {\n            if (arrow.arrowDirection < -90 && arrow.arrowDirection > -270) {\n                return {\n                    transform: 'scaleX(-1) scaleY(-1)',\n                }\n            } else {\n                return {}\n            }\n        }\n\n        let pathD = ''\n        pathD += ' M ' + arrow.from.x + ', ' + arrow.from.y\n        pathD += ' L ' + arrow.to.x + ', ' + arrow.to.y\n\n        return (\n            <>\n                <g>\n                    <path\n                        stroke={'black'}\n                        d={pathD}\n                        transform={\n                            'translate('+ gridRect.x +', '+ gridRect.y +')'\n                        }\n                    />\n                    <foreignObject\n                        style={{\n                            position: 'absolute',\n                            zIndex: -2,\n                            width: '100vw',\n                            height: '100vh',\n                        }}\n                    >\n                        <div style={{\n                            ...labelStyle,\n                            left: arrow.from.x + gridRect.x,\n                            top: arrow.from.y + gridRect.y - 8,\n                            width: arrow.length,\n                            transform: 'rotate(' + arrow.arrowDirection + 'deg)',\n                            paddingLeft: fromArrowHead ? 24 : 8, \n                            paddingRight: toArrowHead ? 24 : 8,\n                        }}>\n                        <div style={{\n                                ...arrowHeadStyle,\n                                left: 0,\n                            }}>\n                                {fromArrowHead}\n                            </div>\n                            <div style={{\n                                ...arrowHeadStyle,\n                                right: 0,\n                            }}>\n                                {toArrowHead}\n                            </div>\n                            <span style={{\n                                ...sideLabelStyle,\n                                ...flip(),\n                            }}>{fromLabel ?? ''}</span>\n                            <span style={{\n                                ...middleLabelStyle,\n                                ...flip(),\n                            }}>{label ?? ''}</span>\n                            <span style={{\n                                ...sideLabelStyle,\n                                ...flip(),\n                            }}>{toLabel ?? ''}</span>\n                        </div>\n                    </foreignObject>\n                </g>\n            </>\n        )\n    }\n}\n\nexport default Arrow\n","import React from 'react'\nimport Arrow from '../Arrow'\nimport EditorData from '../../hooks/editorData'\nimport EditorState from '../../hooks/editorState'\n\nconst groupedConnections = (connections: any) => {\n    let obj: Record<string, any> = {}\n    Object.keys(connections).forEach(\n        (key: string) => {\n            let nodes = [\n                connections[key].from,\n                connections[key].to\n            ].sort()\n            if (obj[nodes[0]]) {\n                obj[nodes[0]].push(key)\n            } else {\n                obj[nodes[0]] = [key]\n            }\n        }\n    )\n    return obj\n}\n\nconst ConnectionGrid = () => {\n    const {\n        connections,\n        references,\n        forceRefresh\n    } = React.useContext(EditorData)!\n\n    const {\n        redraw\n    } = React.useContext(EditorState)!\n\n    React.useEffect(() => {\n        setRender(redraw + forceRefresh)\n    }, [redraw, forceRefresh])\n    \n    const grouped = groupedConnections(connections)\n\n    const [render, setRender] = React.useState<number>(0)\n\n    return (\n        <svg style={{\n            zIndex: -2, \n            position: 'absolute', \n            width: '100vw', \n            height: '100vh'\n        }}>\n            <g>\n                <text visibility={0}>{render}</text>\n            </g>\n        {\n            Object.keys(grouped).map((keyName: string) => {\n                return Object.keys(grouped[keyName]).map(\n                    (connectionId: string, index: number) => {\n                        let connection = connections[\n                            grouped[keyName][index]\n                        ]\n\n                        let props = {\n                            key: grouped[keyName][index],\n                            fromRef: references[connection.from],\n                            toRef: references[connection.to],\n                            gridRef: references['grid'],\n                            label: connection.label,\n                            fromLabel: connection.labelFrom,\n                            toLabel: connection.labelTo,\n                            offset:\n                                index % 2 ? \n                                - Math.ceil(index / 2) : \n                                Math.ceil(index / 2)\n                        }\n\n                        if (connection.type === 'generalization') {\n                            return <Arrow\n                                {...props}\n                                fromLabel=''\n                                toLabel=''\n                                toArrowHead={\n                                    <svg width={16} height={16} viewBox='0 0 16 16'>\n                                        <path\n                                            d=\"M 1, 16 L 1, 1 L 16, 8 L 1, 16 Z\"\n                                            stroke=\"black\"\n                                            fill=\"white\"\n                                        />\n                                    </svg>\n                                }\n                            />\n                        } else if (connection.type === 'association') {\n                            return <Arrow\n                                {...props}\n                            />\n                        } else if (connection.type === 'composition') {\n                            return <Arrow\n                                {...props}\n                                fromArrowHead={\n                                    <svg width={16} height={16} viewBox='0 0 16 16'>\n                                        <path\n                                            d=\"M 1, 8 L 8, 1 L 16, 8 L 8, 16 Z\"\n                                            stroke=\"black\"\n                                            fill=\"black\"\n                                        />\n                                    </svg>\n                                }\n                            />\n                        } else {\n                            return <Arrow\n                                {...props}\n                            />\n                        }\n                    }\n                )\n            })\n        }\n        </svg>\n    )\n}\n\nexport default ConnectionGrid\n","import React from 'react'\nimport { NodeGrid, ConnectionGrid } from '../../editor'\nimport EditorState from '../../hooks/editorState'\nimport EditorData from '../../hooks/editorData'\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch'\nimport { Loading } from 'carbon-components-react'\nimport './_canvas.css'\n\nconst Canvas: React.FC = () => {\n    const {\n        panning,\n        setFocus,\n        setRedraw\n    } = React.useContext(EditorState)!\n\n    const {\n        layout\n    } = React.useContext(EditorData)!\n\n    return (\n        <>\n            {layout ? <Loading/> : <></>}\n            <div \n                onClick={() => {\n                    if (panning) {\n                        setFocus(undefined)\n                    }\n                }}\n                className=\"nguml-canvas\"\n            >\n                <TransformWrapper\n                    options={{\n                        limitToBounds: false,\n                        minScale: 1,\n                        maxScale: 1\n                    }}\n                    pan={{\n                        disabled: !panning\n                    }}\n                    onPanning={() => setRedraw(new Date().getTime())}\n                >\n                    <TransformComponent>\n                        <div style={{\n                            width: '100vw',\n                            height: '100vh'\n                        }}>\n                            <NodeGrid/>\n                        </div>\n                    </TransformComponent>\n                </TransformWrapper>\n            </div>\n            <ConnectionGrid/>\n        </>\n    )\n}\n\nexport default Canvas\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals'\nimport { Main } from './shell'\nimport 'carbon-components/css/carbon-components.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main/> {/* Load the Main Layout / Canvas */}\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}